// schema.prisma - COMPLETE SCHEMA WITH MESSAGES SYSTEM

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ===================================
// USER MODEL
// ===================================
model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  username    String   @unique
  email       String?  @unique
  password    String
  firstName   String?  @map("first_name")
  lastName    String?  @map("last_name")
  role        String   @default("user") // user, admin, super_admin
  isEmailVerified Boolean  @default(false) @map("is_email_verified")
  emailRequired   Boolean  @default(false) @map("email_required")
  profileCompleted Boolean @default(false) @map("profile_completed") 
  bio         String?
  location    String?
  birthDate   DateTime? @map("birth_date")
  avatarUrl   String?  @map("avatar_url")
  bannerUrl   String?  @map("banner_url")
  gumballs    Int      @default(0)
  //isOnline    Boolean  @default(false) @map("is_online")
  lastSeen    DateTime @default(now()) @map("last_seen")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  

  // Level system fields
  level        String   @default("Novice")
  globalRank   Int?     @map("global_rank")
  weeklyRank   Int?     @map("weekly_rank") 
  monthlyRank  Int?     @map("monthly_rank")
  rankChange   Int      @default(0) @map("rank_change")
  weeklyRankChange   Int?  @map("weekly_rank_change") @default(0)
  monthlyRankChange  Int?  @map("monthly_rank_change") @default(0)

  // Referral System Fields
  referralCode     String    @map("referral_code") 
  referredBy       String?   @map("referred_by") @db.ObjectId
  referrer         User?     @relation("UserReferrals", fields: [referredBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referrals        User[]    @relation("UserReferrals")
  totalReferrals   Int       @default(0) @map("total_referrals")
  activeReferrals  Int       @default(0) @map("active_referrals") // Users who are still active
  referralEarnings Int       @default(0) @map("referral_earnings") // Gumballs earned from referrals

  twitterUserId    String?   @map("twitter_user_id")  // User's Twitter ID
  twitterSetupAt   DateTime? @map("twitter_setup_at") // When they connected

  // Relations
  passwordResetTokens PasswordResetToken[]
  verificationCodes EmailVerificationCode[]
  posts              Post[]
  comments           Comment[]
  likes              Like[]
  commentLikes       CommentLike[]
  
  // Friends system
  sentFriendRequests     FriendRequest[] @relation("RequestSender")
  receivedFriendRequests FriendRequest[] @relation("RequestReceiver")
  friendships1           Friendship[] @relation("User1")
  friendships2           Friendship[] @relation("User2")

  // Communities
  communities        CommunityMember[]
  ownedCommunities   Community[] @relation("CommunityOwner")

  // NEW: Messages system
  sentMessages           Message[] @relation("MessageSender")
  conversations          ConversationParticipant[]

  // Level system relations
  gumballHistory GumballHistory[]
  rankHistory    RankHistory[]

  // Notifications
  notifications  Notification[]

  // Referral system relations
  referralRewards  ReferralReward[]
  referredRewards ReferralReward[] @relation("ReferredRewards")

  UserTask UserTask[]
  
  // ðŸš€ OPTIMIZED INDEXES FOR RANKING PERFORMANCE
  @@index([firstName])           // Index for firstName searches
  @@index([lastName])            // Index for lastName searches  
  @@index([firstName, lastName]) // Compound index for full name searches
  @@index([gumballs])            // For gumball-based queries
  @@index([gumballs, createdAt]) // For ordering search results
  @@index([level, gumballs])     // For level system queries
  
  // ðŸš€ RANKING SYSTEM INDEXES
  @@index([globalRank])          // Global ranking queries
  @@index([weeklyRank])          // Weekly ranking queries  
  @@index([monthlyRank])         // Monthly ranking queries
  @@index([globalRank, gumballs]) // Global leaderboard with tiebreaker
  @@index([weeklyRank, gumballs]) // Weekly leaderboard with tiebreaker
  @@index([monthlyRank, gumballs]) // Monthly leaderboard with tiebreaker
  @@index([gumballs, globalRank]) // Reverse for efficient rank calculation
  @@index([level, globalRank])   // Level-filtered rankings
  @@index([level, weeklyRank])   // Level-filtered weekly rankings
  @@index([level, monthlyRank])  // Level-filtered monthly rankings
  
  // ðŸš€ SEARCH & FILTER OPTIMIZATION
  @@index([firstName, globalRank]) // Search with ranking
  @@index([lastName, globalRank])  // Search with ranking
  @@index([username, globalRank])  // Username search with ranking
  @@index([level, gumballs, globalRank]) // Multi-filter optimization
  
  // ðŸš€ GENERAL PERFORMANCE INDEXES
  //@@index([isOnline])            // For online status queries
  @@index([createdAt])           // For chronological queries
  @@index([lastSeen])            // For activity tracking
  @@index([referredBy])          // For referral chain queries
  @@index([referralCode])
  @@index([profileCompleted])
  @@index([twitterUserId])       // Index for quick lookups
  @@map("users")
  
}

// Referral System
model ReferralReward {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @map("user_id") @db.ObjectId
  referredUserId String @map("referred_user_id") @db.ObjectId
  rewardType  String   // "signup", "first_post", "week_active", "month_active"
  amount      Int      // Gumballs earned
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  referredUser User @relation("ReferredRewards", fields: [referredUserId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([referredUserId])
  @@index([createdAt])
  @@map("referral_rewards")
}

model ReferralClick {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  referralCode String   @map("referral_code")
  ipAddress    String   @map("ip_address")
  userAgent    String?  @map("user_agent")
  converted    Boolean  @default(false) // Did they sign up?
  convertedUserId String? @map("converted_user_id") @db.ObjectId
  createdAt    DateTime @default(now()) @map("created_at")
  
  @@index([referralCode])
  @@index([ipAddress])
  @@index([createdAt])
  @@map("referral_clicks")
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  email     String
  userId    String   @map("user_id") @db.ObjectId
  isUsed    Boolean  @default(false) @map("is_used")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([userId])
  @@index([expiresAt])
  @@index([email, isUsed])
  @@map("password_reset_tokens")
}

model EmailVerificationCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String   // 6-digit code
  email     String   
  userId    String?  @map("user_id") @db.ObjectId  // MongoDB ObjectId type
  expiresAt DateTime @map("expires_at")
  isUsed    Boolean  @default(false) @map("is_used")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relation to user (optional for new signups)
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([email])
  @@index([code])
  @@index([expiresAt])
  @@index([userId])
  @@index([email, isUsed])
  @@map("email_verification_codes")
}

// Platform model (Twitter, YouTube, Telegram)
model Platform {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique // "Twitter", "YouTube", "Telegram"
  iconUrl   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  tasks     Task[]
  
  @@map("platforms")
}

// Task model
model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  platformId  String   @map("platform_id") @db.ObjectId
  type        String   // "follow", "like", "retweet", "comment", "subscribe", "watch"
  title       String
  description String
  
  // Target information (who to follow, what to like, etc.)
  target      Json     // { handle: "@username", tweetId: "123", videoId: "abc", etc. }
  
  // Reward information
  reward      Int      // Gumballs to award
  currency    String   @default("Gumballs")
  
  // Task properties
  difficulty  Int      @default(1) // 1-5 scale
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  
  // Requirements (optional)
  requirements Json?   // Array of requirements like account age, follower count, etc.
  
  // Verification settings
  verificationMethod String @default("api") // "api", "screenshot", "manual"
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  platform    Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)
  userTasks   UserTask[]
  
  @@index([platformId])
  @@index([type])
  @@index([isActive])
  @@index([difficulty])
  @@index([createdAt])
  @@index([isActive, reward])     // For sorting
  @@index([isActive, difficulty])         // For difficulty filter
  @@index([isActive, createdAt])         // For date sorting
  @@index([platformId, isActive])        // For platform filter
  @@index([title, description])          // For search
  @@map("tasks")
}

// User task completion tracking
model UserTask {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @map("user_id") @db.ObjectId
  taskId     String   @map("task_id") @db.ObjectId
  
  // Task progress
  status     String   @default("available") // "available", "in_progress", "completed", "failed", "expired"
  startedAt  DateTime? @map("started_at")
  completedAt DateTime? @map("completed_at")
  
  // Verification data
  submissionData   Json?    // User-submitted data (username, tweet ID, etc.)
  verificationData Json?    // API verification response
  
  // Manual verification (if needed)
  verifiedBy       String?  @map("verified_by") @db.ObjectId
  verificationNote String?  @map("verification_note")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@unique([userId, taskId])
  @@index([userId])
  @@index([taskId])
  @@index([status])
  @@index([completedAt])
  @@index([userId, status])              // For status filter
  @@index([userId, completedAt])         // For date filter
  @@index([taskId, userId])              // For joins
  @@map("user_tasks")
}


// ===================================
// FRIENDS SYSTEM
// ===================================
model FriendRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  status    String   @default("pending") // pending, accepted, declined
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  senderId   String @map("sender_id") @db.ObjectId
  sender     User   @relation("RequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String @map("receiver_id") @db.ObjectId
  receiver   User   @relation("RequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([receiverId, status])
  @@index([senderId, status])
  @@index([createdAt])
  @@map("friend_requests")
}

model Friendship {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")

  user1Id String @map("user1_id") @db.ObjectId
  user1   User   @relation("User1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2Id String @map("user2_id") @db.ObjectId
  user2   User   @relation("User2", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
  @@index([createdAt])
  @@map("friendships")
}

// ===================================
// POSTS & SOCIAL CONTENT
// ===================================
model Post {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  content       String?
  mediaUrls     String[] @map("media_urls")
  postType      String   @default("text") @map("post_type")
  linkPreview   Json?    @map("link_preview")
  likesCount    Int      @default(0) @map("likes_count")
  commentsCount Int      @default(0) @map("comments_count")
  sharesCount   Int      @default(0) @map("shares_count")
  isPublic      Boolean  @default(true) @map("is_public")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  userId      String    @map("user_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId String?   @map("community_id") @db.ObjectId
  community   Community? @relation(fields: [communityId], references: [id])
  comments    Comment[]
  likes       Like[]

  @@index([userId])
  @@index([createdAt])
  @@index([communityId])
  @@index([userId, createdAt])
  @@index([isPublic, createdAt])
  @@map("posts")
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  likesCount  Int      @default(0) @map("likes_count")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userId    String        @map("user_id") @db.ObjectId
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String        @map("post_id") @db.ObjectId
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId  String?       @map("parent_id") @db.ObjectId
  parent    Comment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[]     @relation("CommentReplies")
  likes     CommentLike[]

  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@index([postId, createdAt])
  @@map("comments")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")

  userId String @map("user_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String @map("post_id") @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
  @@index([createdAt])
  @@map("likes")
}

model CommentLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")

  userId    String  @map("user_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String  @map("comment_id") @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_likes")
}

// ===================================
// COMMUNITIES
// ===================================
model Community {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  rules       String?
  avatarUrl   String?  @map("avatar_url")
  bannerUrl   String?  @map("banner_url")
  memberCount Int      @default(0) @map("member_count")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  createdById String            @map("created_by_id") @db.ObjectId
  createdBy   User              @relation("CommunityOwner", fields: [createdById], references: [id])
  members     CommunityMember[]
  posts       Post[]

  @@index([name])
  @@index([createdAt])
  @@index([memberCount])
  @@map("communities")
}

model CommunityMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  role      String   @default("member") // member, admin, owner
  joinedAt  DateTime @default(now()) @map("joined_at")

  userId      String    @map("user_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId String    @map("community_id") @db.ObjectId
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
  @@index([communityId])
  @@index([userId])
  @@map("community_members")
}

// ===================================
// MESSAGING SYSTEM
// ===================================
model Conversation {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String?  // For group chats
  avatarUrl    String?  @map("avatar_url")
  isGroup      Boolean  @default(false) @map("is_group")
  lastMessage  String?  @map("last_message")
  lastActivity DateTime @default(now()) @map("last_activity")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  lastSequenceNumber Int   @default(0) @map("last_sequence_number")

  // Relations
  participants ConversationParticipant[]
  messages     Message[]

  @@index([lastActivity])
  @@index([isGroup])
  @@index([createdAt])
  @@map("conversations")
}

model ConversationParticipant {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  joinedAt     DateTime @default(now()) @map("joined_at")
  lastReadAt   DateTime @default(now()) @map("last_read_at")
  isActive     Boolean  @default(true) @map("is_active") // For soft leaving groups

  userId         String       @map("user_id") @db.ObjectId
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversationId String       @map("conversation_id") @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@index([conversationId])
  @@index([userId])
  @@index([lastReadAt])
  @@map("conversation_participants")
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String?
  mediaUrls   String[] @map("media_urls")
  messageType String   @default("text") @map("message_type") // text, image, video, file, audio
  isEdited    Boolean  @default(false) @map("is_edited")
  editedAt    DateTime? @map("edited_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  status          String  @default("sending") @map("status") // sending, sent, delivered, read, failed
  sequenceNumber  Int     @map("sequence_number")

  // Relations
  senderId       String       @map("sender_id") @db.ObjectId
  sender         User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  conversationId String       @map("conversation_id") @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // For message replies (optional feature)
  replyToId String?  @map("reply_to_id") @db.ObjectId
  replyTo   Message? @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Message[] @relation("MessageReplies")

  @@index([conversationId, createdAt])
  @@index([senderId])
  @@index([createdAt])
  @@index([conversationId, sequenceNumber])
  @@index([status])
  @@map("messages")
}

// ===================================
// LEVEL SYSTEM
// ===================================
model GumballHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @map("user_id") @db.ObjectId
  gumballs  Int      // Snapshot of total gumballs
  change    Int      // +10, -5, etc
  reason    String   // "post_created", "received_like", "task_completed", "message_sent"
  week      String   // "2024-W23" (ISO week)
  month     String   // "2024-06"
  createdAt DateTime @default(now()) @map("created_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([week])
  @@index([month])
  @@index([createdAt])
  @@index([reason])
  @@map("gumball_history")
}

model RankHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @map("user_id") @db.ObjectId
  globalRank Int      @map("global_rank")
  weeklyRank Int?     @map("weekly_rank")
  monthlyRank Int?    @map("monthly_rank")
  gumballs   Int      // Snapshot of gumballs at this time
  week       String   // "2024-W23"
  month      String   // "2024-06"
  createdAt  DateTime @default(now()) @map("created_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([week])
  @@index([month])
  @@index([globalRank])
  @@map("rank_history")
}

// ===================================
// OPTIONAL: NOTIFICATIONS SYSTEM
// ===================================
model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String   // "message", "friend_request", "like", "comment", "mention"
  title     String
  content   String
  data      Json?    // Additional data (IDs, URLs, etc.)
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  userId String @map("user_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
  @@index([type])
  @@map("notifications")
}